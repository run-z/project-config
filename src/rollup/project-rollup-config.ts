import deepmerge from 'deepmerge';
import module from 'node:module';
import path from 'node:path';
import type { RollupOptions, RollupOutput } from 'rollup';
import { ProjectPackage } from '../package/project-package.js';
import { type ProjectConfig } from '../project-config.js';
import { ProjectDevTool } from '../project-dev-tool.js';
import { ProjectTypescriptConfig } from '../typescript/project-typescript-config.js';
import {
  ProjectRollupPlugin$create,
  ProjectRollupPlugin$get,
} from './project-rollup-plugin.impl.js';

function ProjectRollupConfig$create(project: ProjectConfig): ProjectRollupConfig {
  const { rollup } = project.tools;

  if (!rollup) {
    return new ProjectRollupConfig(project);
  }
  if (rollup instanceof ProjectRollupConfig) {
    return rollup;
  }

  return new ProjectRollupConfig(project).extendOptions(...RollupOptions$asArray(rollup));
}

/**
 * Rollup configuration of the project.
 */
export class ProjectRollupConfig extends ProjectDevTool {

  /**
   * Gains Rollup configuration of the project.
   *
   * Respects {@link ProjectToolsInit#rollup defaults}.
   *
   * @param project - Configured project.
   *
   * @returns Rollup configuration of the `project`.
   */
  static of(project: ProjectConfig): ProjectRollupConfig {
    return project.get(ProjectRollupConfig$create);
  }

  /**
   * Loads Rollup configuration from ESM module.
   *
   * If configuration file found, its options {@link ProjectRollupConfig#replaceOptions replace} the default ones.
   * Default configuration returned otherwise.
   *
   * @param project - Configured project.
   * @param url - Rollup configuration URL relative to project root. Defaults to `./rollup.config.js`.
   *
   * @returns Loaded configuration.
   */
  static async load(
    project: ProjectConfig,
    url = './rollup.config.js',
  ): Promise<ProjectRollupConfig> {
    const config = ProjectRollupConfig.of(project);
    const options: RollupOptions | null = await project.loadConfig(url, null);

    return options ? config.replaceOptions(options) : config;
  }

  #rollup?: Promise<typeof import('rollup')>;
  #autogenerated = true;
  #customOptions: () => RollupOptions[] | Promise<RollupOptions[]>;
  #options?: Promise<RollupOptions[]>;

  /**
   * Constructs rollup configuration for the project.
   *
   * @param project - Configured project.
   */
  constructor(project: ProjectConfig) {
    super(project);
    this.#customOptions = () => [];
  }

  protected override clone(): this {
    const clone = super.clone();

    clone.#rollup = this.#rollup;
    clone.#autogenerated = this.#autogenerated;
    clone.#customOptions = this.#customOptions;

    return clone;
  }

  /**
   * Rollup API instance.
   */
  get rollup(): Promise<typeof import('rollup')> {
    return (this.#rollup ??= import('rollup').then(rollup => rollup.default || rollup));
  }

  /**
   * Whether options generated automatically prior to applying custom ones.
   *
   * `true` by default.
   */
  get autogenerated(): boolean {
    return this.#autogenerated;
  }

  /**
   * Promise resolved to array of customized Rollup options.
   */
  get options(): Promise<RollupOptions[]> {
    return (this.#options ||= this.#toOptions());
  }

  /**
   * Replaces Rollup options with custom ones.
   *
   * Clears custom options, and prevents {@link autogenerated automatic generation}.
   *
   * @param options - Rollup options to apply.
   *
   * @returns Updated instance.
   */
  replaceOptions(...options: RollupOptions[]): this {
    const clone = this.clone();

    clone.#autogenerated = false;
    clone.#customOptions = () => options;

    return clone;
  }

  /**
   * Replaces custom Rollup options with autogenerated ones.
   *
   * Clears custom options, and forces {@link autogenerated automatic generation}.
   *
   * @param options - Rollup options extending autogenerated ones.
   *
   * @returns Updated instance.
   */
  autogenerateOptions(...options: RollupOptions[]): this {
    const clone = this.clone();

    clone.#autogenerated = true;
    clone.#customOptions = () => options;

    return clone;
  }

  /**
   * Extends Rollup options.
   *
   * If extension created by {@link ProjectRollupConfig#options Rollup configuration}, it will be used as is.
   * Otherwise, new custom options instance will be created with options merged.
   *
   * @param extensions - Rollup options extending previous ones.
   *
   * @returns Updated instance.
   */
  extendOptions(...extensions: RollupOptions[]): this {
    if (extensions.length) {
      const clone = this.clone();
      const prevOptions = this.#customOptions;

      clone.#customOptions = async () => await RollupOptions$extendAll(await prevOptions(), extensions);

      return clone;
    }

    return this;
  }

  /**
   * Configures and runs Rollup.
   *
   * @returns Promise resolved to array of rollup outputs.
   */
  async run(): Promise<RollupOutput[]> {
    const { rollup } = await this.rollup;
    const result: RollupOutput[] = [];

    for (const options of await this.options) {
      const { write } = await rollup(options);
      let { output = [] } = options;

      if (!Array.isArray(output)) {
        output = [output];
      }

      await Promise.all(
        output.map(async output => {
          result.push(await write(output));
        }),
      );
    }

    return result;
  }

  /**
   * Customizes Rollup options.
   *
   * @returns Promise resolved to array of customized Rollup options.
   */
  async #toOptions(): Promise<RollupOptions[]> {
    const customOptions = await this.#customOptions();

    if (!this.autogenerated) {
      // Ignore autogenerated options.
      return customOptions;
    }

    const autogeneratedOptions = await this.#autogenerateOptions();

    // Extend autogenerated options with custom ones.
    return await RollupOptions$extendAll([autogeneratedOptions], customOptions);
  }

  async #autogenerateOptions(): Promise<RollupOptions> {
    const { sourceDir } = this.project;
    const pkg = ProjectPackage.of(this.project);
    const output = await this.project.output;
    const { distDir, cacheDir } = output;
    const entries = await pkg.generatedEntries;
    const mainEntry = await pkg.mainEntry;
    const distFiles = new Map<string, string>(
      await Promise.all(
        [...entries].map(
          async ([name, entry]): Promise<[string, string]> => [
            name,
            path.relative(distDir, path.resolve(distDir, await entry.distFile)),
          ],
        ),
      ),
    );
    const chunksByDir: [string, string][] = await Promise.all(
      [...entries].map(async ([name, entry]): Promise<[string, string]> => {
        const sourceFile = await entry.sourceFile;
        const entryDir = path.dirname(path.resolve(sourceDir, sourceFile));

        return [`${entryDir}/${path.sep}`, `_${name}.js`];
      }),
    );

    const tsConfig = ProjectTypescriptConfig.of(this.project);
    const { default: tsPlugin } = await import('rollup-plugin-typescript2');
    const { default: flatDts } = await import('rollup-plugin-flat-dts');

    return {
      input: Object.fromEntries(
        await Promise.all(
          [...entries].map(
            async ([name, entry]): Promise<[string, string]> => [
              name,
              path.resolve(sourceDir, await entry.sourceFile),
            ],
          ),
        ),
      ),
      plugins: [
        ProjectRollupPlugin$create(this),
        tsPlugin({
          typescript: await tsConfig.typescript,
          tsconfigOverride: await tsConfig.options,
          cacheRoot: path.join(cacheDir, 'rts2'),
        }),
      ],
      external: await this.#externalModules(),
      output: {
        dir: distDir,
        format: 'esm',
        sourcemap: true,
        entryFileNames: chunk => distFiles.get(chunk.name) || '',
        manualChunks: (moduleId, moduleApi) => {
          const moduleInfo = moduleApi.getModuleInfo(moduleId);

          if (!moduleInfo || moduleInfo.isExternal) {
            return null;
          }

          for (const [dir, chunk] of chunksByDir) {
            if (moduleId.startsWith(dir)) {
              return chunk;
            }
          }

          return null;
        },
        plugins: [
          flatDts({
            tsconfig: tsConfig.tsconfig || undefined,
            compilerOptions: {
              ...(await tsConfig.tscOptions),
              declarationMap: true,
            },
            lib: true,
            file: await mainEntry.typesFile,
            entries: Object.fromEntries(
              await Promise.all(
                [...entries]
                  .filter(item => item[1] !== mainEntry)
                  .map(async ([name, entry]) => [name, { file: await entry.typesFile }]),
              ),
            ),
            internal: ['**/impl/**', '**/*.impl'],
          }),
        ],
      },
    };
  }

  async #externalModules(): Promise<(this: void, id: string) => boolean> {
    const pkg = ProjectPackage.of(this.project);
    const {
      dependencies = {},
      devDependencies = {},
      peerDependencies = {},
      optionalDependencies = {},
    } = await pkg.packageJson;

    const externals = new Set([
      ...module.builtinModules,
      ...Object.keys(dependencies),
      ...Object.keys(devDependencies),
      ...Object.keys(peerDependencies),
      ...Object.keys(optionalDependencies),
    ]);

    return id => {
      if (id.startsWith('node:')) {
        // Built-in Node.js module.
        return true;
      }

      let slashIdx = id.indexOf('/');

      if (slashIdx > 0) {
        if (id.startsWith('@')) {
          // Scoped package.
          // Module name includes one slash.
          slashIdx = id.indexOf('/', slashIdx + 1);
        }
        if (slashIdx > 0) {
          id = id.slice(0, slashIdx);
        }
      }

      return externals.has(id);
    };
  }

}

/**
 * {@link ProjectRollupConfig.of Specifier} of Rollup configuration of the project.
 */
export type ProjectRollupSpec =
  | ProjectRollupConfig
  | RollupOptions
  | readonly RollupOptions[]
  | undefined;

function RollupOptions$asArray(
  options: RollupOptions | readonly RollupOptions[] | undefined,
): readonly RollupOptions[] {
  return options ? (Array.isArray(options) ? options : [options]) : [];
}

async function RollupOptions$extendAll(
  base: RollupOptions[],
  extensions: RollupOptions[],
): Promise<RollupOptions[]> {
  if (!extensions.length) {
    return base;
  }
  if (!base.length) {
    return extensions;
  }

  const length = Math.min(base.length, extensions.length);
  const result: RollupOptions[] = [];

  for (let i = 0; i < length; ++i) {
    if (i >= extensions.length) {
      result.push(base[i]);
    } else if (i >= base.length) {
      result.push(extensions[i]);
    } else {
      result.push(await RollupOptions$extend(base[i], extensions[i]));
    }
  }

  return result;
}

async function RollupOptions$extend(
  base: RollupOptions,
  extension: RollupOptions,
): Promise<RollupOptions> {
  if (await ProjectRollupPlugin$get(extension)) {
    return extension;
  }

  return deepmerge(base, extension, {
    arrayMerge(target: unknown[], source: unknown[]): unknown[] {
      // TODO Merge Rollup plugins?
      return [...target, ...source];
    },
  });
}
